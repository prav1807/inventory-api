/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.template.api;

import com.project.template.model.ItemRequestApiBean;
import com.project.template.model.ItemResponseApiBean;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-25T16:31:04.818894800+04:00[Indian/Mauritius]")
@Controller
@Tag(name = "item", description = "the item API")
public interface ItemApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/items : Create a new item in the inventory
     *
     * @param itemRequestApiBean  (required)
     * @return Created (status code 201)
     *         or Bad Request - Invalid input data (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "createItem",
        summary = "Create a new item in the inventory",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemResponseApiBean.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request - Invalid input data"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/items",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ItemResponseApiBean> createItem(
        @Parameter(name = "ItemRequestApiBean", description = "", required = true) @RequestBody ItemRequestApiBean itemRequestApiBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 10, \"price\" : 999.99, \"name\" : \"Laptop\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/items/{itemId} : Delete an item
     *
     * @param itemId ID of the item (required)
     * @return No Content - Successful deletion (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found - Item does not exist (status code 404)
     */
    @Operation(
        operationId = "deleteItem",
        summary = "Delete an item",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content - Successful deletion"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found - Item does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/items/{itemId}"
    )
    default ResponseEntity<Void> deleteItem(
        @Parameter(name = "itemId", description = "ID of the item", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/items/{itemId} : Find item by ID
     *
     * @param itemId ID of the item (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found - Item does not exist (status code 404)
     */
    @Operation(
        operationId = "getItemById",
        summary = "Find item by ID",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemResponseApiBean.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found - Item does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/items/{itemId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ItemResponseApiBean> getItemById(
        @Parameter(name = "itemId", description = "ID of the item", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 10, \"price\" : 999.99, \"name\" : \"Laptop\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/items/{itemId} : Update an existing item
     *
     * @param itemId ID of the item (required)
     * @param itemRequestApiBean  (required)
     * @return OK (status code 200)
     *         or Bad Request - Invalid input data (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found - Item does not exist (status code 404)
     */
    @Operation(
        operationId = "updateItem",
        summary = "Update an existing item",
        tags = { "item" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemResponseApiBean.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request - Invalid input data"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found - Item does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/items/{itemId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ItemResponseApiBean> updateItem(
        @Parameter(name = "itemId", description = "ID of the item", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @Parameter(name = "ItemRequestApiBean", description = "", required = true) @RequestBody ItemRequestApiBean itemRequestApiBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 10, \"price\" : 999.99, \"name\" : \"Laptop\", \"id\" : \"123e4567-e89b-12d3-a456-426614174000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
